"use strict";
/**
 * # NodeAlreadyExistsError
 *
 * This error is thrown when trying to create a node with the same identity as an existing node.
 *
 * @category Errors
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CycleError = exports.NodeDoesntExistError = exports.NodeAlreadyExistsError = void 0;
var NodeAlreadyExistsError = /** @class */ (function (_super) {
    __extends(NodeAlreadyExistsError, _super);
    function NodeAlreadyExistsError(newNode, oldNode, identity) {
        var _this = _super.call(this, JSON.stringify(newNode) + " shares an identity (" + identity + ") with " + JSON.stringify(oldNode)) || this;
        _this.newNode = newNode;
        _this.oldNode = oldNode;
        _this.identity = identity;
        _this.name = "NodeAlreadyExistsError";
        // This bs is due to a limitation of Typescript: https://github.com/facebook/jest/issues/8279
        Object.setPrototypeOf(_this, NodeAlreadyExistsError.prototype);
        return _this;
    }
    return NodeAlreadyExistsError;
}(Error));
exports.NodeAlreadyExistsError = NodeAlreadyExistsError;
/**
 * # NodeDoesntExistError
 * This error is thrown when trying to access a node in a graph by it's identity when that node doesn't exist
 *
 * @category Errors
 */
var NodeDoesntExistError = /** @class */ (function (_super) {
    __extends(NodeDoesntExistError, _super);
    function NodeDoesntExistError(identity) {
        var _this = _super.call(this, "A node with identity " + identity + " doesn't exist in the graph") || this;
        _this.identity = identity;
        _this.name = "NodeDoesntExistError";
        // This bs is due to a limitation of Typescript: https://github.com/facebook/jest/issues/8279
        Object.setPrototypeOf(_this, NodeDoesntExistError.prototype);
        return _this;
    }
    return NodeDoesntExistError;
}(Error));
exports.NodeDoesntExistError = NodeDoesntExistError;
/**
 * # CycleError
 *
 * This error is thrown when attempting to create or update a Directed Acyclic Graph that contains a cycle.
 *
 * @category Errors
 */
var CycleError = /** @class */ (function (_super) {
    __extends(CycleError, _super);
    function CycleError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = "CycleError";
        // This bs is due to a limitation of Typescript: https://github.com/facebook/jest/issues/8279
        Object.setPrototypeOf(_this, CycleError.prototype);
        return _this;
    }
    return CycleError;
}(Error));
exports.CycleError = CycleError;
//# sourceMappingURL=errors.js.map